# yaml-language-server: $schema=../node_modules/somod-schema/schemas/serverless-template/index.json

Resources:
  ChatApi:
    Type: AWS::Serverless::HttpApi
    SOMOD::Access: public
    SOMOD::Output:
      default: true
    Properties: {}

  ThreadTable:
    Type: AWS::DynamoDB::Table
    SOMOD::Access: public
    SOMOD::Output:
      default: true
      attributes: [Arn]
    Properties:
      TableName:
        SOMOD::ResourceName: Thread
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          SOMOD::Parameter: dynamodb.pitr.enable
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S

  MessageBox:
    Type: AWS::DynamoDB::Table
    SOMOD::Access: public
    SOMOD::Output:
      default: true
      attributes: [Arn, StreamArn]
    Properties:
      TableName:
        SOMOD::ResourceName: MessageBox
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          SOMOD::Parameter: dynamodb.pitr.enable
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: seqNo
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: seqNo
          AttributeType: "N"
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  MessageStreamHandlerDLQ:
    Type: AWS::SQS::Queue
    SOMOD::Output:
      default: true
      attributes: [Arn, QueueName, QueueUrl]
    Properties:
      QueueName:
        SOMOD::ResourceName: MessageStreamHandlerDLQ

  MessageStreamHandler:
    Type: AWS::Serverless::Function
    SOMOD::Access: public
    Properties:
      FunctionName:
        SOMOD::ResourceName: MsgStrmHandler
      CodeUri:
        SOMOD::Function:
          name: messageStreamHandler
          type: DynamoDB
      Environment:
        Variables:
          MESSAGE_BOX_TABLE_NAME:
            SOMOD::Ref:
              resource: MessageBox
          THREAD_TABLE_NAME:
            SOMOD::Ref:
              resource: ThreadTable
          MSG_NOTIFICATION_TOPIC:
            SOMOD::Ref:
              resource: MessageNotificationTopic
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: MessageBox
                    attribute: Arn
              Action:
                - "dynamodb:PutItem"
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: ThreadTable
                    attribute: Arn
              Action:
                - "dynamodb:GetItem"
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: MessageNotificationTopic
              Action:
                - "sns:Publish"
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: MessageStreamHandlerDLQ
                    attribute: Arn
              Action:
                - "sqs:SendMessage"
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream:
              SOMOD::Ref:
                resource: MessageBox
                attribute: StreamArn
            BatchSize: 1
            MaximumRetryAttempts: 3
            StartingPosition: LATEST
            DestinationConfig:
              OnFailure:
                Destination:
                  SOMOD::Ref:
                    resource: MessageStreamHandlerDLQ
                    attribute: Arn

  UserProviderMiddleware:
    Type: SOMOD::Serverless::FunctionMiddleware
    SOMOD::Access: public
    SOMOD::Output:
      default: true
    Properties:
      CodeUri:
        SOMOD::FunctionMiddleware:
          name: userProvider

  Message:
    Type: AWS::Serverless::Function
    SOMOD::Access: public
    Properties:
      FunctionName:
        SOMOD::ResourceName: MessageApi
      CodeUri:
        SOMOD::Function:
          name: message
          type: HttpApi
          middlewares:
            - module: somod-http-extension
              resource: SomodHttpMiddleware
            - resource: UserProviderMiddleware
      Environment:
        Variables:
          MESSAGE_BOX_TABLE_NAME:
            SOMOD::Ref:
              resource: MessageBox
          THREAD_TABLE_NAME:
            SOMOD::Ref:
              resource: ThreadTable
          SESSION_SECRET:
            SOMOD::Parameter: chat.session.jwt.secret
          SESSION_FORCE:
            SOMOD::Parameter: chat.session.force

      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: MessageBox
                    attribute: Arn
              Action:
                - "dynamodb:PutItem"
                - "dynamodb:Query"
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: ThreadTable
                    attribute: Arn
              Action:
                - "dynamodb:GetItem"
      Events:
        PostMessage:
          Type: HttpApi
          Properties:
            ApiId:
              SOMOD::Ref:
                resource: ChatApi
            Method: POST
            Path: /post-message
        SyncMessages:
          Type: HttpApi
          Properties:
            ApiId:
              SOMOD::Ref:
                resource: ChatApi
            Method: GET
            Path: /sync-messages

  Thread:
    Type: AWS::Serverless::Function
    SOMOD::Access: public
    Properties:
      FunctionName:
        SOMOD::ResourceName: ThreadApi
      CodeUri:
        SOMOD::Function:
          name: thread
          type: HttpApi
          middlewares:
            - module: somod-http-extension
              resource: SomodHttpMiddleware
            - resource: UserProviderMiddleware
      Environment:
        Variables:
          THREAD_TABLE_NAME:
            SOMOD::Ref:
              resource: ThreadTable
          MESSAGE_BOX_TABLE_NAME:
            SOMOD::Ref:
              resource: MessageBox
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: ThreadTable
                    attribute: Arn
              Action:
                - "dynamodb:PutItem"
                - "dynamodb:GetItem"
                - "dynamodb:UpdateItem"
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: MessageBox
                    attribute: Arn
              Action:
                - "dynamodb:PutItem"
      Events:
        CreateThread:
          Type: HttpApi
          Properties:
            ApiId:
              SOMOD::Ref:
                resource: ChatApi
            Method: POST
            Path: /thread
        GetThread:
          Type: HttpApi
          Properties:
            ApiId:
              SOMOD::Ref:
                resource: ChatApi
            Method: GET
            Path: /thread/{id}
        UpdateSessionRequireInThread:
          Type: HttpApi
          Properties:
            ApiId:
              SOMOD::Ref:
                resource: ChatApi
            Method: POST
            Path: /thread/{id}/session

  MessageNotificationTopic:
    Type: AWS::SNS::Topic
    SOMOD::Access: public
    SOMOD::Output:
      default: true
      attributes:
        - TopicName
    Properties:
      TopicName:
        SOMOD::ResourceName: MsgNotificationTopic

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    # SOMOD::CreateIf:
    #   SOMOD::Equals:
    #     - SOMOD::Parameter: chat.enable.websocket
    #     - true
    SOMOD::Access: public
    Properties:
      Name:
        SOMOD::ResourceName: ChatWebsocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    # SOMOD::CreateIf:
    #   SOMOD::Equals:
    #     - SOMOD::Parameter: chat.enable.websocket
    #     - true
    SOMOD::Access: public
    Properties:
      ApiId:
        SOMOD::Ref:
          resource: WebSocketApi
      RouteKey: $connect
      OperationName: ConnectRoute
      Target:
        Fn::Join:
          - "/"
          - - "integrations"
            - SOMOD::Ref:
                resource: ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    Properties:
      ApiId:
        SOMOD::Ref:
          resource: WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunctionArn}/invocations
          - OnConnectFunctionArn:
              SOMOD::Ref:
                resource: OnConnectFunction
                attribute: Arn
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    Properties:
      ApiId:
        SOMOD::Ref:
          resource: WebSocketApi
      RouteKey: $disconnect
      OperationName: DisconnectRoute
      Target:
        Fn::Join:
          - "/"
          - - "integrations"
            - SOMOD::Ref:
                resource: DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    Properties:
      ApiId:
        SOMOD::Ref:
          resource: WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunctionArn}/invocations
          - OnDisconnectFunctionArn:
              SOMOD::Ref:
                resource: OnDisconnectFunction
                attribute: Arn
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    SOMOD::Output:
      default: true
    Properties:
      ApiId:
        SOMOD::Ref:
          resource: WebSocketApi
      RouteKey: $default
      OperationName: DefaultRoute
      Target:
        Fn::Join:
          - "/"
          - - "integrations"
            - SOMOD::Ref:
                resource: DefaultInteg
  DefaultRouteResponse:
    Type: "AWS::ApiGatewayV2::RouteResponse"
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    SOMOD::Output:
      default: true
    Properties:
      RouteId:
        SOMOD::Ref:
          resource: DefaultRoute
      ApiId:
        SOMOD::Ref:
          resource: WebSocketApi
      RouteResponseKey: $default
  DefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    SOMOD::Output:
      default: true
    Properties:
      ApiId:
        SOMOD::Ref:
          resource: WebSocketApi
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnMessageFunctionArn}/invocations
          - OnMessageFunctionArn:
              SOMOD::Ref:
                resource: OnMessageFunction
                attribute: Arn

  DefaultIntegResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    Properties:
      ApiId:
        SOMOD::Ref:
          resource: WebSocketApi
      IntegrationId:
        SOMOD::Ref:
          resource: DefaultInteg
      IntegrationResponseKey: $default

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    Properties:
      StageName: $default
      ApiId:
        SOMOD::Ref:
          resource: WebSocketApi
      AutoDeploy: true
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    SOMOD::Output:
      default: true
      attributes:
        - Arn
    Properties:
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          SOMOD::Parameter: dynamodb.pitr.enable
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "userId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: ByUserId
          KeySchema:
            - AttributeName: "userId"
              KeyType: "HASH"
          Projection:
            ProjectionType: KEYS_ONLY

  OnConnectFunction:
    Type: AWS::Serverless::Function
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    SOMOD::Output:
      attributes:
        - Arn
    Properties:
      CodeUri:
        SOMOD::Function:
          type: WebSocket
          name: wsOnConnect
          middlewares:
            - resource: UserProviderMiddleware
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME:
            SOMOD::Ref:
              resource: ConnectionsTable
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: ConnectionsTable
                    attribute: Arn
              Action:
                - "dynamodb:PutItem"
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        SOMOD::Ref:
          resource: OnConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/$default/$connect
          - ApiId:
              SOMOD::Ref:
                resource: WebSocketApi
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    SOMOD::Output:
      attributes:
        - Arn
    Properties:
      CodeUri:
        SOMOD::Function:
          type: WebSocket
          name: wsOnDisconnect
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME:
            SOMOD::Ref:
              resource: ConnectionsTable
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: ConnectionsTable
                    attribute: Arn
              Action:
                - "dynamodb:DeleteItem"
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        SOMOD::Ref:
          resource: OnDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/$default/$disconnect
          - ApiId:
              SOMOD::Ref:
                resource: WebSocketApi

  OnMessageFunction:
    Type: AWS::Serverless::Function
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    SOMOD::Output:
      attributes:
        - Arn
    Properties:
      CodeUri:
        SOMOD::Function:
          type: WebSocket
          name: wsOnMessage
          middlewares:
            - module: somod-websocket-extension
              resource: SomodWebSocketMiddleware
            - resource: UserProviderMiddleware
      Environment:
        Variables:
          MESSAGE_BOX_TABLE_NAME:
            SOMOD::Ref:
              resource: MessageBox
          THREAD_TABLE_NAME:
            SOMOD::Ref:
              resource: ThreadTable
          SESSION_SECRET:
            SOMOD::Parameter: chat.session.jwt.secret
          SESSION_FORCE:
            SOMOD::Parameter: chat.session.force
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: MessageBox
                    attribute: Arn
              Action:
                - "dynamodb:PutItem"
            - Effect: Allow
              Resource:
                - SOMOD::Ref:
                    resource: ThreadTable
                    attribute: Arn
              Action:
                - "dynamodb:GetItem"
  OnMessagePermission:
    Type: AWS::Lambda::Permission
    SOMOD::CreateIf:
      SOMOD::Equals:
        - SOMOD::Parameter: chat.enable.websocket
        - true
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        SOMOD::Ref:
          resource: OnMessageFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/$default/$default
          - ApiId:
              SOMOD::Ref:
                resource: WebSocketApi
  NotifyMessageFunction:
    Type: AWS::Serverless::Function
    # SOMOD::CreateIf:
    #   SOMOD::Equals:
    #     - SOMOD::Parameter: chat.enable.websocket
    #     - true
    SOMOD::Access: public
    Properties:
      CodeUri:
        SOMOD::Function:
          type: SNS
          name: wsNotifyMessage
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME:
            SOMOD::Ref:
              resource: ConnectionsTable
          CONNECTIONS_ENDPOINT:
            Fn::Sub:
              - "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
              - WebSocketApi:
                  SOMOD::Ref:
                    resource: WebSocketApi
                Stage:
                  SOMOD::Ref:
                    resource: Stage
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Resource:
                - Fn::Sub:
                    - ${ConnectionsTableArn}/index/ByUserId
                    - ConnectionsTableArn:
                        SOMOD::Ref:
                          resource: ConnectionsTable
                          attribute: Arn
              Action:
                - "dynamodb:Query"
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - Fn::Sub:
                    - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
                    - WebSocketApi:
                        SOMOD::Ref:
                          resource: WebSocketApi
      Events:
        NotifyFromSNS:
          Type: SNS
          Properties:
            Topic:
              SOMOD::Ref:
                resource: MessageNotificationTopic

      Timeout: 300 # 5 minutes

Outputs:
  chat.http-api.id:
    Fn::Sub:
      - https://${apiId}.execute-api.${AWS::Region}.amazonaws.com/
      - apiId:
          SOMOD::Ref:
            resource: ChatApi
  chat.websocket-api.id:
    SOMOD::If:
      - SOMOD::Equals:
          - SOMOD::Parameter: chat.enable.websocket
          - true
      - Fn::Sub:
          - wss://${apiId}.execute-api.${AWS::Region}.amazonaws.com/$default
          - apiId:
              SOMOD::Ref:
                resource: WebSocketApi
      - null
